-- -*- mode: lua; encoding: windows-1251 -*-
local get_string = game.translate_string
local level_object = level.object_by_id
local string_format = string.format
local string_gfind = string.gfind
local string_find = string.find
local table_insert = table.insert

local cell_size = 25  -- размер иконки в описании свойств предмета
local vert_interval = 1		-- РїР°СЂР°РјРµС‚СЂ vert_interval РІ СЃРєСЂРѕР»Р»Рµ

local shift_show_descr = 500  -- через какое время после наведения курсора будет показано окно, ms


local is_grenade={
	[clsid.wpn_grenade_f1]		= true,
	[clsid.wpn_grenade_fake]	= true,
	[clsid.wpn_grenade_rgd5]	= true,
	[clsid.wpn_grenade_rpg7]	= true
}

-- Пушки, для которых дополнительное описание не пишем
local forbidden_wpns = {
	['wpn_binoc']                   = true,		-- бинокль
}

-- съедобное
local is_eatable = {
	[clsid.obj_antirad]	= true,
	[clsid.obj_bandage]	= true,
	[clsid.obj_bottle]	= true,
	[clsid.obj_food]	= true,
	[clsid.obj_medkit]	= true
}

-- Параметры актёра, по которым считаются некоторые параметры артефактов или костюмов
local conditions = {
	bleeding_restore_speed	= sys_ini:r_float('actor_condition', 'bleeding_v'),
	health_restore_speed	= sys_ini:r_float('actor_condition', 'satiety_health_v'),
	power_restore_speed	= sys_ini:r_float('actor_condition', 'satiety_power_v') *100,
	satiety_restore_speed	= sys_ini:r_float('actor_condition', 'satiety_v'),
	thirst_restore_speed	= sys_ini:r_float('actor_condition', 'thirst_v'),
	radiation_restore_speed	= sys_ini:r_float('actor_condition', 'radiation_v') *100
}
-- параметры костюмов и артов
local conditions_params = {
	{ prop = "health_restore_speed",	text = "Здоровье:",		tex = "health"		},
	{ prop = "bleeding_restore_speed",	text = "Кровотечение:",		tex = "bleeding"	},
	{ prop = "satiety_restore_speed",	text = "Сытость:",		tex = "satiety"		},
	{ prop = "thirst_restore_speed",	text = "Жажда:",		tex = "thirst"		},
	{ prop = "power_restore_speed",		text = "Выносливость:",		tex = "power"		},
	{ prop = "radiation_restore_speed",	text = "Радиация:",		tex = "radiation_2", unit = "Ки"	},
}
-- Типы хитов и соответствующие им текстуры и названия
local hit_types = {
	{ prop = "burn",			text = "Ожог:"			},
	{ prop = "shock",			text = "Электрошок:"		},
	{ prop = "strike",			text = "Удар:"			},
	{ prop = "wound",			text = "Разрыв:"		},
	{ prop = "radiation",			text = "Радиация:"		},
	{ prop = "telepatic",			text = "Телепатия:"		},
	{ prop = "chemical_burn",		text = "Хим. ожог:"		},
	{ prop = "explosion",			text = "Взрыв:"			},
	{ prop = "fire_wound",			text = "Пулестойкость:"		}
}
-- Параметры еды
local eatable_params = {
	{ prop = "eat_health",				text = "Здоровье:",	tex = "health"		},
	{ prop = "wounds_heal_perc",		        text = "Кровотечение:",	tex = "bleeding"	},
	{ prop = "eat_psy_health",			text = "Пси-здоровье:",	tex = "telepatic"	},
	{ prop = "eat_satiety",				text = "Сытость:",	tex = "satiety"		},
	{ prop = "eat_power",				text = "Выносливость:",	tex = "power"		},
	{ prop = "eat_thirst",                          text = "Жажда:",        tex = "thirst"		},
	{ prop = "eat_alcohol",				text = "Опьянение:",	tex = "alcohol"		},
	{ prop = "eat_radiation",			text = "Радиация:",	tex = "radiation_2"	},
	{ prop = "eat_radiation_arc",		        text = "Радиация:",	tex = "radiation_2", unit = "Р"	}
}
--------------------------------------------------------------------------------------------------------
class "CUIDescriptionWnd" (CUIScriptWnd)

function CUIDescriptionWnd:__init(owner, autosubscribe) super()
	self.owner = level.main_input_receiver() or owner

	self.scrollPos = 0
	self.k_icon = cell_size*kScreen/50
	
	self:Init(0, 0, 1024, 768)
	self:SetAutoDelete(true)
	
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_inv_descr.xml")
	
	self.frame = self.xml:InitFrame("description", owner)
	
	self.inv_name = self.xml:InitStatic("description:inv_name", self.frame)
	
	self.scroll_v = self.xml:InitScrollView("description:scroll_v", self.frame)
	self.scroll_height = self.scroll_v:GetHeight()
	self.descr = self.xml:InitStatic("description:descr_list", nil)
	
	self.cost = self.xml:InitStatic("description:cost_wnd", self.frame)
	self.weight_static = self.xml:InitStatic("description:weight_wnd", self.frame)
	
	self.cond_frame = self.xml:InitStatic("description:frame_condition", self.frame)
	self.cond_scale = self.xml:InitProgressBar("description:condition_progress", self.cond_frame)

	self.frame:Show(false)

	self:subscribe()
	self.autounsubscribe = true

end

function CUIDescriptionWnd:__finalize()
end

function CUIDescriptionWnd:subscribe()
  if not subscribed then
    subscribed = {
      { signal = "on_cell_item_focus", fun = self.OnItemFocus, self = self },
      { signal = "on_cell_item_focus_lost", fun = self.OnItemFocusLost, self = self },
      { signal = "on_key_down", fun = self.OnKeyPress, self = self },
      { signal = "on_wheel", fun = self.OnMouseWheel, self = self },
      { signal = "on_update",  fun = self.OnUpdate, self = self },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:subscribe( s )
    end
  end
  self.itemInFocus = -1
end

function CUIDescriptionWnd:unsubscribe()
  if subscribed then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:unsubscribe( s )
    end
    subscribed = false
  end
  self.itemInFocus = -1
  self.shift_tmr = nil
  self.frame:Show(false)
end

function CUIDescriptionWnd:HideDescription()
	if self.frame:IsShown() then self.frame:Show(false) end
end

function CUIDescriptionWnd:OnMouseWheel(mode)
	if not self.frame:IsShown() then return end
	if self.frame:GetHeight() < 768 then return end

	local n = mode and -40 or 40 
	local mx = self.scroll_v:GetMaxScrollPos()
	if mx > self.scroll_height then mx = mx - self.scroll_height end
	self.scrollPos = math.clamp(self.scrollPos + n, 0, mx)
	self.scroll_v:SetScrollPos(self.scrollPos)
end

function CUIDescriptionWnd:ShowProps(tbl)
	local st
	for i, t in ipairs(tbl) do
		st = self.xml:InitStatic("props", self.scroll_v)
		st.icon = self.xml:InitStatic("props:prop_texture", st)
		st.icon:InitTexture("ui_inv_icon_"..t[1])
		st.text = self.xml:InitStatic("props:prop_text", st)
		st.text:SetText(t[2])
		self.addH = self.addH + st:GetHeight() + vert_interval
	end
end

function CUIDescriptionWnd:ShowPropFromIni(icon, text)
	local st = self.xml:InitStatic("props_ini", self.scroll_v)
	st:SetHeight(cell_size)

	local w = icon.w*self.k_icon
	local ww = cell_size*2
	st.icon = CUIStatic()
	st:AttachChild(st.icon)
	st.icon:InitTexture("ui\\ui_icon_equipment")
	st.icon:SetOriginalRect(icon.x, icon.y, icon.w, icon.h)
	st.icon:Init((ww-w)/2, 0, w, cell_size)
	st.icon:SetStretchTexture(true)

	ww = ww + 1
	st.text = CUIStatic()
	st:AttachChild(st.text)
	st.text:Init(ww, 0, st:GetWidth()-ww, cell_size)
	st.text:SetTextY((cell_size/2)-8)
	st.text:SetTextST(text)
	st.text:SetTextColor(255, 160, 160 ,160)

	self.addH = self.addH + cell_size + vert_interval
end

function CUIDescriptionWnd:ShowDescription(item)
	if (item==nil) or BlockUIDescr() then return end
	
	local owner = level.main_input_receiver()
	if owner == nil then return end
	
	self.scroll_v:Clear()
	
	self.item = item
	self.section = item:section()
	self.condition = item:condition()

	local inv_name = news_manager.get_inv_name(self.section)

	self.addH = 0

	local description = get_string(sys_ini:r_string(self.section, "description"))


	-- artefacts
	if item:is_artefact() then
			self:ShowAfParams()
	end

	self.inv_name:SetTextST(inv_name)

	self.descr:SetText(description)
	self.descr:AdjustHeightToText()
	self.scroll_v:AddWindow(self.descr, true)
	self.descr:SetAutoDelete(false)
	self.scroll_v:ScrollToBegin()
	self.scrollPos = 0


	-- food
	if isEatable(item) then
		self:ShowEatableParams()
	-- weapon
	elseif isWeapon(item) then
		if not forbidden_wpns[self.section] then
			self:ShowWeaponParams()
		end
	-- outfits
	elseif item:is_outfit() then
		self:ShowOutfitParams()
	-- knife
	elseif item:is_knife() then
		local d = sys_ini:r_float(self.section, 'fire_distance')
		self:ShowProps( { {"fire_distance_knife", "дистанция удара: "..string_format("%.2f м.", d)} } )
	-- scope
	elseif item:is_scope() then
		local zf = sys_ini:r_float(self.section, 'scope_zoom_factor')
		local zoom = device().fov/(zf*0.75)
		self:ShowProps( { {"scope", "x"..string_format("%.1f", zoom)} } )
	-- grenade
	elseif item:is_grenade() then
		local fr = sys_ini:r_float(self.section, 'frags_r')
		local br =  sys_ini:r_float(self.section, 'blast_r')
		self:ShowProps( { {"explosion", string_format("опасный радиус: %.1f м.", (fr+br)/2)} } )
	-- ammo
	elseif item:is_ammo() then
		local kh = sys_ini:r_float(self.section, 'k_hit')
		local bs = sys_ini:r_float(self.section, 'buck_shot')
		self:ShowProps( { {"explosion", string_format("Убойность патронов: %.2f ", (kh*bs))} } )
	end

	if inv_name == "unknown_art" then
		self.cost:SetText("")
	else
		self.cost:SetText(string_format("Цена: %d руб.", item:cost() ) )
	end
	self.weight_static:SetText(string_format("Вес: %.2f кг.", item:get_weight()) )

	if need_show_condition(item) then
		self.cond_frame:Show(true)
		self.cond_frame:SetText(
			string_format("%s: %.1f%%", get_string("ui_st_condition"), self.condition*100)
		)
		self.cond_scale:SetProgressPos(self.condition * 100)
	else
		self.cond_frame:Show(false)
	end

	local hh = self.descr:GetHeight() + self.addH
	if hh < 678 then
		self.frame:SetHeight(hh + 90)
		self.scroll_work = nil
	else
		self.frame:SetHeight(768)
		self.scroll_work = true
	end

	local cr = self.owner:GetMousePosX()
	if cr>=512 then cr = cr - self.frame:GetWidth()
	else cr = cr + 40 end

	self.frame:SetWndPos(cr, math.min(self.owner:GetMousePosY(), 768-self.frame:GetHeight()))

	self.frame:Show(true)
end

-- Показываем параметры съедобных предметов
function CUIDescriptionWnd:ShowEatableParams()
	local params = {}
	local val, txt = 0, ""
	for i, t in ipairs(eatable_params) do
		val = get_float(self.section, t.prop, 0)
		if val~=0 then
			txt = t.text.." "
			if t.prop == "wounds_heal_perc" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "eat_alcohol"
				or t.prop == "eat_radiation"
				or t.prop == "eat_radiation_arc"
			then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
				if t.prop == "eat_radiation_arc" then val = val/100 end
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string_format("%d",val*100)..(t.unit or "%")
			table_insert( params, {t.tex, txt} )
		end
	end

	if #params>0 then
		self:ShowProps(params)
	end
end

-- Показываем описание оружия
function CUIDescriptionWnd:ShowWeaponParams()
	self.xml:InitStatic("props", self.scroll_v)
	self.addH = self.addH + 20
	local st = self.xml:InitStatic("props", self.scroll_v)
	st:SetText("Боеприпасы:")
	st:SetTextColor(255, 238, 153, 26)
	self.addH = self.addH + 20
	-- Боеприпасы
	local s = sys_ini:r_string(self.section, 'ammo_class')
	for a in string_gfind(s, "[%w_%-%.]+") do
		self:ShowPropFromIni( GetIconParams(a), news_manager.get_inv_name(a) )
	end

	self.xml:InitStatic("props", self.scroll_v)
	self.addH = self.addH + 20
	
	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	hit = sys_ini:r_float(self.section, 'hit_power')

	st:SetHeight(25)

	st.icon_hit = self.xml:InitStatic("props:prop_texture", st)
	st.icon_hit:InitTexture("ui_inv_icon_hit_power")

	st.scale_hit_b = CUIStatic()
	st:AttachChild(st.scale_hit_b)
	st.scale_hit_b:Init( "ui_inventory_progress_bar", 20, 15, 118, 6 )
	st.scale_hit_b:SetStretchTexture(true)
	st.scale_hit_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_hit = CUIStatic()
	st:AttachChild(st.scale_hit)
	local tex_name, tex_rect = get_texture_info( "ui_inventory_progress_bar_16" )
	st.scale_hit:Init( tex_name, 20, 15, 118*hit, 6 )
	st.scale_hit:SetStretchTexture(true)
	st.scale_hit:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*hit, tex_rect.y2 )
	st.scale_hit:SetColor( GetARGB(255, 255, 255, 255) )
	st.scale_hit:SetText( "Убойность оружия: "..string_format("%.2f", hit) )
	st.scale_hit:SetTextY(-17)


	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	distance = sys_ini:r_float(self.section, 'fire_distance')

	st:SetHeight(25)

	st.icon_distance = self.xml:InitStatic("props:prop_texture", st)
	st.icon_distance:InitTexture("ui_inv_icon_fire_distance")

	st.scale_distance_b = CUIStatic()
	st:AttachChild(st.scale_distance_b)
	st.scale_distance_b:Init( "ui_inventory_progress_bar", 20, 15, 118, 6 )
	st.scale_distance_b:SetStretchTexture(true)
	st.scale_distance_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_distance = CUIStatic()
	st:AttachChild(st.scale_distance)
	local tex_name, tex_rect = get_texture_info( "ui_inventory_progress_bar_16" )
	st.scale_distance:Init( tex_name, 20, 15, 118*(distance/1000), 6 )
	st.scale_distance:SetStretchTexture(true)
	st.scale_distance:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*(distance/1000), tex_rect.y2 )
	st.scale_distance:SetColor( GetARGB(255, 255, 255, 255) )
	st.scale_distance:SetText( "Эффективная дальность: "..string_format("%d", distance) .." метров" )
	st.scale_distance:SetTextY(-17)


	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	rpm = sys_ini:r_float(self.section, 'rpm')

	st:SetHeight(25)

	st.icon_rpm = self.xml:InitStatic("props:prop_texture", st)
	st.icon_rpm:InitTexture("ui_inv_icon_rpm")

	st.scale_rpm_b = CUIStatic()
	st:AttachChild(st.scale_rpm_b)
	st.scale_rpm_b:Init( "ui_inventory_progress_bar", 20, 15, 118, 6 )
	st.scale_rpm_b:SetStretchTexture(true)
	st.scale_rpm_b:SetColor( GetARGB(255, 0, 0, 0) )

	st.scale_rpm = CUIStatic()
	st:AttachChild(st.scale_rpm)
	local tex_name, tex_rect = get_texture_info( "ui_inventory_progress_bar_16" )
	st.scale_rpm:Init( tex_name, 20, 15, 118*(rpm/1000), 6 )
	st.scale_rpm:SetStretchTexture(true)
	st.scale_rpm:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*(rpm/1000), tex_rect.y2 )
	st.scale_rpm:SetColor( GetARGB(255, 255, 255, 255) )
	st.scale_rpm:SetText( "Скорострельность: "..string_format("%d", rpm) .." в/мин" )
	st.scale_rpm:SetTextY(-17)

	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + 25

	mag_size = sys_ini:r_float(self.section, 'ammo_mag_size')

	st:SetHeight(25)

	st.icon_mag_size = self.xml:InitStatic("props:prop_texture", st)
	st.icon_mag_size:InitTexture("ui_inv_icon_ammo_mag_size")
	st.icon_mag_size:SetText( "Ёмкость магазина: "..string_format("%d", mag_size) )
	st.icon_mag_size:SetTextX(19)
	st.icon_mag_size:SetTextY(2)
end

-- Показываем параметры артефактов
function CUIDescriptionWnd:ShowAfParams()
	local params = {}
	local val, txt = 0, ""

	for i,t in ipairs(conditions_params) do
		val = sys_ini:r_float(self.section, t.prop, 0)
		if val then
			val = val*100/conditions[t.prop]
			txt = t.text.." "
			if t.prop == "bleeding_restore_speed" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "radiation_restore_speed" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string_format("%d",val)..(t.unit or "%")
			table_insert( params, {t.tex, txt} )
		end
	end

	local hit_absorbation_sect = sys_ini:r_string(self.section, "hit_absorbation_sect")
	for i,t in ipairs(hit_types) do
		val = sys_ini:r_float(hit_absorbation_sect, t.prop.."_immunity")
		if val~=1 then
			val = 100-val*100
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)
			table_insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight") then
		val = sys_ini:r_float(self.section, "additional_inventory_weight")
		if val~=0 then
			txt = "Переносимый вес: "..(val>0 and "%c[green]+" or "%c[red]")..string_format("%.1f",val).." кг"
			table_insert( params, {"additional_weight", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end
-- Показываем параметры костмов
function CUIDescriptionWnd:ShowOutfitParams()
	local params = {}
	local val, txt = 0, ""
	for i,t in ipairs(hit_types) do
		val = sys_ini:r_float(self.section, t.prop.."_protection")
		if val~=0 then
			val = val*100*self.condition
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)
			table_insert( params, {t.prop, txt} )
		end
	end



	if sys_ini:line_exist(self.section, "additional_inventory_weight2") then
		val = sys_ini:r_float(self.section, "additional_inventory_weight2")
		if val>0 then
			txt = "Грузоподъёмность: %c[green]+"..string_format("%.1f",val).." кг"
			table_insert( params, {"additional_weight", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end


function CUIDescriptionWnd:Remove()
	self:unsubscribe()
	self.shift_tmr = nil
	self.owner = nil
end

function CUIDescriptionWnd:OnItemFocus( obj )
	self.itemInFocus = obj:id()
	self.shift_tmr = time_global() + shift_show_descr
end

function CUIDescriptionWnd:OnItemFocusLost( obj )
	if self.itemInFocus==obj:id() then
		self.itemInFocus = nil
	end
	self:HideDescription()
end

function CUIDescriptionWnd:OnUpdate( delta )
	if self.shift_tmr and self.shift_tmr < time_global() then
		if self.itemInFocus and ( self.itemInFocus > 65535 or alife():object( self.itemInFocus ) ) then
			if self.itemInFocus > 65535 then
				self:ShowDescription( fake_inventory_item.get_item(self.itemInFocus) )
			else
			self:ShowDescription( level_object(self.itemInFocus) )
		end
		end
		self.shift_tmr = nil
	end
end

function CUIDescriptionWnd:OnKeyPress(key, bind)
	if ( bind == key_bindings.kWPN_FIRE or bind == key_bindings.kWPN_ZOOM ) then
		self:HideDescription()
		self.itemInFocus = nil
	end
end