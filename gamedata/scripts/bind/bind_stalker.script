-- -*- mode: lua; coding: windows-1251-dos -*-
function init( obj )
  xr_motivator.AddToMotivator( obj )
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

local sim = alife()

local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
}

class "actor_binder" ( object_binder )
function actor_binder:__init( obj ) super( obj )
  sim = alife()
  self.bCheckStart = false
  self.actor_detector  = xr_detector.actor_detector()
  self.am          = ogse_signals.get_mgr()
  self.am:call( "on_load_before_all" )
  self.am:call( "on_init", obj )
end

function actor_binder:__finalize()
  self.am:call( "on_finalize" )
end

function actor_binder:net_spawn( data )
  db.add_actor( self.object )
  self.am:call( "on_before_spawn" )
  cmd( "unbind quick_save" )
  cmd( "unbind quick_load" )
  cmd("r2_dof_control", "off")

  level.show_indicators()
  level.set_snd_volume( 1 )
  self.bCheckStart = true
  if object_binder.net_spawn(self,data) == false then
    return false
  end

	level.enable_input() --НЕ УДАЛЯТЬ!

  if actor_stats.add_to_ranking ~= nil then
    actor_stats.add_to_ranking( self.object:id() )
  end

	cmd("r2_ls_bloom_threshold 1.") --Избавляемся от пересветов
	cmd("r2_gloss_factor 1.") --Избавляемся от пересветов
	cmd("r3_minmax_sm off") --От этого фпс дропается у некоторых при долгой игре.
	if get_console():get_integer("r3_dynamic_wet_surfaces_sm_res") < 1024 then
		cmd("r3_dynamic_wet_surfaces_sm_res 1024") --Чтобы полос на стенах не было во время дождя.
	end
	cmd("r2_exp_donttest_shad off") --С вкл окклюдером хоть тени на худе и мерцают, но он экономит фпс. В будущих релизах движка он будет переписан, и там это будет доправлено. Поэтому отключать его всё таки не надо.
	cmd("time_factor 1")

	starvation.on_game_load()

	--// xr_companion
	local actor_comm = db.actor:character_community()
	for k, v in pairs(xr_companion.companions) do
		if v == actor_comm then
			xr_companion.companions[k] = "companion"
		end
	end
	--// xr_companion
	
  self.am:call( "on_spawn", data )
  return true
end


function actor_binder:net_destroy()

	actor_stats.remove_from_ranking(self.object:id())

  db.del_actor( self.object )

  self.object:set_callback( callback.inventory_info, nil )
  self.object:set_callback( callback.article_info, nil )
  self.object:set_callback( callback.on_item_take, nil )
  self.object:set_callback( callback.on_pickup_item_showing, nil )
  self.object:set_callback( callback.on_item_drop, nil )
  self.object:set_callback( callback.trade_sell_buy_item, nil )
  -- self.object:set_callback( callback.actor_sleep, nil )
  self.object:set_callback( callback.task_state, nil )
  -- self.object:set_callback( callback.map_location_added, nil )
  self.object:set_callback( callback.level_border_enter, nil )
  self.object:set_callback( callback.level_border_exit, nil )
  self.object:set_callback( callback.take_item_from_box, nil )
  self.object:set_callback( callback.use_object, nil )
  self.object:set_callback( callback.on_key_press, nil )
  self.object:set_callback( callback.on_key_release, nil )
  self.object:set_callback( callback.on_key_hold, nil )
  self.object:set_callback( callback.on_mouse_wheel, nil )
  self.object:set_callback( callback.on_mouse_move, nil )
  self.object:set_callback( callback.on_belt, nil )
  self.object:set_callback( callback.on_ruck, nil )
  self.object:set_callback( callback.on_slot, nil )
  self.object:set_callback( callback.on_cell_item_select, nil )
  self.object:set_callback( callback.hit, nil )
  self.object:set_callback( callback.on_goodwill_change, nil )
  self.object:set_callback( callback.death, nil )
  self.object:set_callback( callback.entity_alive_before_hit, nil )
  self.object:set_callback( callback.place_item_to_box, nil )
  self.object:set_callback( callback.update_artefacts_on_belt, nil )
  self.object:set_callback( callback.level_changer_action, nil )
  self.object:set_callback( callback.on_cell_item_focus, nil )
  self.object:set_callback( callback.on_cell_item_focus_lost, nil )
  self.object:set_callback( callback.on_cell_item_mouse, nil )

  self.am:call( "on_destroy" )

  object_binder.net_destroy( self )
end


function actor_binder:reinit()
	object_binder.reinit( self )
  
	local npc_id = self.object:id()
	db.storage[npc_id] = {}
	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.next_restrictors_update_time = -10000

  self.object:set_callback( callback.inventory_info, self.info_callback, self )
  self.object:set_callback( callback.article_info, self.article_callback, self )
  self.object:set_callback( callback.on_item_take, self.on_item_take, self )
  self.object:set_callback( callback.on_pickup_item_showing, self.on_pickup, self )
  self.object:set_callback( callback.on_item_drop, self.on_item_drop, self )
  self.object:set_callback( callback.trade_sell_buy_item, self.on_trade, self )
  self.object:set_callback( callback.task_state, self.task_callback, self )
  self.object:set_callback( callback.level_border_enter, self.level_border_enter, self )
  self.object:set_callback( callback.level_border_exit, self.level_border_exit, self )
  self.object:set_callback( callback.take_item_from_box, self.take_item_from_box, self )
  self.object:set_callback( callback.use_object, self.on_use_object, self )
  self.object:set_callback( callback.hit, self.hit_callback, self )
  self.object:set_callback( callback.death, self.death_callback, self )

  -- нажатие клавиши
  self.object:set_callback( callback.on_key_press, self.on_key, self )
  -- отпускание клавиши
  self.object:set_callback( callback.on_key_release, self.on_key_free, self )
  -- удержание клавиши
  self.object:set_callback( callback.on_key_hold, self.on_key_hold, self )
  -- вращение колесика мыши
  self.object:set_callback( callback.on_mouse_wheel, self.on_wheel_rotation, self )
  -- движение мыши
  self.object:set_callback( callback.on_mouse_move, self.on_mouse_move, self )
  -- перемещение предмета на пояс
  self.object:set_callback( callback.on_belt, self.item_to_belt, self )
  -- перемещение предмета в рюкзак
  self.object:set_callback( callback.on_ruck, self.item_to_backpack, self )
  -- перемещение предмета в слот
  self.object:set_callback( callback.on_slot, self.item_to_slot, self )
  self.object:set_callback( callback.on_cell_item_select, self.on_select_item, self )
  -- изменение отношений
  self.object:set_callback( callback.on_goodwill_change, self.on_goodwill_change, self )
  self.object:set_callback( callback.entity_alive_before_hit, self.before_hit_callback, self )
  self.object:set_callback( callback.on_before_use_item, self.before_use, self )
  self.object:set_callback(
    callback.place_item_to_box, self.on_inv_box_put_item, self
  )
  self.object:set_callback(
    callback.update_artefacts_on_belt, self.update_artefacts_on_belt, self
  )
  self.object:set_callback(
    callback.level_changer_action, self.level_changer_action, self
  )
  self.object:set_callback(
    callback.on_cell_item_focus, self.on_cell_item_focus, self
  )
  self.object:set_callback(
    callback.on_cell_item_focus_lost, self.on_cell_item_focus_lost, self
  )
  self.object:set_callback(
    callback.on_cell_item_mouse, self.on_cell_item_mouse, self
  )

  self.am:call( "on_reinit" )
end


function actor_binder:on_goodwill_change( from, to )
  self.am:call( "on_goodwill_change", from, to )
end


function actor_binder:death_callback( obj, who )
  level.set_snd_volume( 1 )
  self.am:call( "on_death", obj, who )
end


function actor_binder:take_item_from_box( box, item )
	addon.take_from_box(box)
	local story_id = box:story_id()
	if story_id == nil then
		return
	end


  self.am:call( "on_take_from_box", box, item, sim:object( item:id() ) )

end


function actor_binder:level_border_enter( npc, info_id )
  self.actor_detector:actor_enter() 
  self.am:call( "on_level_border_enter", npc, info_id )
end


function actor_binder:level_border_exit( npc, info_id )
  self.actor_detector:actor_exit() 
  self.am:call( "on_level_border_exit", npc, info_id )
end



local info2call = {
  ui_car_body              = "on_body_open",
  ui_car_body_hide         = "on_body_hide",
  ui_inventory             = "on_inventory_open",
  ui_inventory_hide        = "on_inventory_hide",
  ui_pda                   = "on_pda_open",
  ui_pda_actor_info        = "on_pda_actor_info",
  ui_pda_contacts          = "on_pda_contacts_open",
  ui_pda_contacts_hide     = "on_pda_contacts_hide",
  ui_pda_diary             = "on_pda_diary_open",
  ui_pda_diary_hide        = "on_pda_diary_hide",
  ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
  ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
  ui_pda_events            = "on_pda_events",
  ui_pda_hide              = "on_pda_hide",
  ui_pda_jobs              = "on_pda_jobs_open",
  ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
  ui_pda_jobs_current      = "on_pda_jobs_current",
  ui_pda_jobs_failed       = "on_pda_jobs_failed",
  ui_pda_jobs_hide         = "on_pda_jobs_hide",
  ui_pda_map_global        = "on_pda_map_global",
  ui_pda_map_local         = "on_pda_map_local",
  ui_pda_news              = "on_pda_news_open",
  ui_pda_news_hide         = "on_pda_news_hide",
  ui_pda_ranking           = "on_pda_ranking",
  ui_talk                  = "on_talk_open",
  ui_talk_hide             = "on_talk_hide",
  ui_trade                 = "on_trade_open",
  ui_trade_hide            = "on_trade_hide",
}

function actor_binder:info_callback( npc, info_id )

  self.am:call( "on_info", npc, info_id )
  local sc = info2call[ info_id ]
  if sc then
    self.am:call( sc, npc )
  end

	--' Сюжет
	level_tasks.proceed(self.object)
	-- Отметки на карте
	level_tasks.process_info_portion(info_id)
end


local is_on_trade = false

function actor_binder:on_trade( item, sell_bye, money )
    if sell_bye == true then
    game_stats.money_trade_update( money )
    else
    game_stats.money_trade_update( -money )
  end

  self.am:call( "on_trade", item, sell_bye, money )
  is_on_trade = true
end


function actor_binder:article_callback( npc, group, name, article_type )
  if device().precache_frame >1 then return end
  
  dmx_mod.encyclopedy_news(group,name) -- DMX MOD


  self.am:call( "on_article", npc, group, name, article_type )
end


function actor_binder:on_item_take( obj )

          local item = obj 

    level_tasks.proceed(self.object)

  local sobj = alife():object( obj:id() )

  self.am:call( "on_take", obj, sobj )
end

function actor_binder:on_pickup( obj )

          local item = obj 

  local sobj = alife():object( obj:id() )

  self.am:call( "on_pickup", obj, sobj )
end

function actor_binder:on_item_drop( obj )

    level_tasks.proceed(self.object)
  self.am:call( "on_drop_before_all", obj )
  local sobj = sim:object( obj:id() )

  self.am:call( "on_drop", obj, sobj )
end


function actor_binder:before_use( item )
  self.am:call( "on_actor_before_use", item, sim:object( item:id() ) )
end


function actor_binder:before_hit_callback( hit_data )

end


function actor_binder:task_callback(_task, _objective, _state)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end
	self.am:call("on_task", _task, _objective, _state)
end


function actor_binder:map_location_added_callback( spot_type_str, object_id )
  if ( false == app_ready() ) or device().precache_frame > 1 then return end
  self.am:call( "on_add_map_location", spot_type_str, object_id )
end


local update_was_never_called = true

function actor_binder:update(delta) 
	self.am:call("on_update", delta)

	if update_was_never_called then
		self.am:call( "on_before_first_update" )
	end
	self.am:call( "on_before_update", delta )
	if not first_update then
		self.am:call( "on_before_first_update" )
		first_update = true
	end

	local time = time_global() 
  object_binder.update( self, delta )

	game_stats.update (delta, self.object)

  -- апдейт схемы детектора
	self.actor_detector:update() 

	if db.actor:has_info("abdul_goto_roadbus") then
if db.actor:has_info("bar_abdul_rest_off") and db.actor:dont_has_info("perehod_svalka") and db.actor:dont_has_info("perehod_svalka1") then
db.actor:give_info_portion("perehod_svalka1")
myscript.start_timer()
	
	end
end
	
	  -- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
	   game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle
	then
		level.enable_input()
		self.st.disable_input_time = nil
  end

  -- Обновление сна с переносом чувака в указанную позицию
	if self.st.sleep_relocate_time ~= nil and
	   game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle
	then
		self.object:set_actor_position(self.st.sleep_relocate_point)
		local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
		self.object:set_actor_direction(dir:getH())
		self.st.sleep_relocate_time = nil
	end 

  -- Апдейт прятание оружия игрока во время диалога
	if weapon_hide == true or self.object:is_talking() then
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
	end 

		task_manager.actor_update()

  if self.bCheckStart then
    db.money = self.object:money()

    if
      ( not has_alife_info( "storyline_actor_start" ) )

    then
      self.am:call( "on_storyline_start" )
      self.object:give_info_portion( "storyline_actor_start" )
      _G.g_start_avi = true
    end


    if not has_alife_info( "global_dialogs" ) then
      self.object:give_info_portion( "global_dialogs" )
    end

    if not has_alife_info( "level_changer_icons" ) then
      self.object:give_info_portion( "level_changer_icons" )
	level.add_pp_effector ("agr_u_fade.ppe", 204406, false)
    end

    level_tasks.add_lchanger_location()
	
    self.bCheckStart = nil
  end
	debuger()
	
  if update_was_never_called then
    self.am:call( "on_first_update" )
    update_was_never_called = false
    self.am:delay_time_limit( 10000 )
	end
end

function debuger()

  _sdata.vis_int()
end

local keyboard_events = {
  [ "on_key_down" ] = "on_key_down",
  [ "on_key_hold" ] = "on_key_hold",
  [ "on_key_up"   ] = "on_key_up",
}

local kShifts = { [DIK_keys.DIK_RSHIFT] = true, [DIK_keys.DIK_LSHIFT] = true }

function actor_binder:on_key(key, bind)

	if key == bind_to_dik(key_bindings.kDOLL_HINTS) then addon_2.wonderdoll_target_check() end
	if key == bind_to_dik(key_bindings.kART_USE) then addon.arts_activation_interface_start() end
	if key == bind_to_dik(key_bindings.kTELE) then addon_2.use_teleport_in_T_outfit() end
	if key == bind_to_dik(key_bindings.kDOLL_USE) then addon_2.use_doll() end
	if key == bind_to_dik(key_bindings.kJUMP) then addon.hit_actor_up() end
	if key == DIK_keys.DIK_K then addon_dialogs.faint_bodies_check() end
	if key == bind_to_dik(key_bindings.kTELE) then addon.teleport_to_vis_obj() end
	if key == DIK_keys.DIK_Z then addon_2.special_arts_effects() end

  self.am:call("on_key_down", key, bind)
end

function actor_binder:on_key_free(key, bind)
  self.am:call("on_key_up", key, bind)
end

function actor_binder:on_key_hold(key, bind)
  self.am:call("on_key_hold", key, bind)
end


function actor_binder:on_wheel_rotation( vol )
  self.am:call( "on_wheel", vol )
end


function actor_binder:on_mouse_move( velx, vely )
  self.am:call( "on_mouse_move", velx, vely )
end


function actor_binder:item_to_belt( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_item_to_belt", obj, sobj )
  end
end


function actor_binder:item_to_backpack( obj )

  local sobj = sim:object( obj:id() )
  if sobj then
  -- такое бывает, когда спавним в инвентарь предмет, а потом его тут же
  -- удаляем ещё выхода в онлайн
    self.am:call( "on_item_to_ruck", obj, sobj )
  end
end


function actor_binder:item_to_slot( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_item_to_slot", obj, sobj )
  end
end


function actor_binder:on_select_item( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_select_item", obj, sobj )
  end
end


function actor_binder:hit_callback( obj, amount, local_direction, who, bone_index )
  self.am:call( "on_hit", obj, amount, local_direction, who, bone_index )
end


function actor_binder:save( packet )

  object_binder.save(self, packet)

  --' Сохраняем уровень сложности
  if save_treasure_manager == true then
    packet:w_u8( level.get_game_difficulty() + 128 )
  else
    packet:w_u8( level.get_game_difficulty() )
  end

  if self.st.disable_input_time == nil then
    packet:w_bool(false)
  else
    packet:w_bool(true) 
    utils.w_CTime(packet, self.st.disable_input_time)
  end

  xr_logic.pstor_save_all(self.object, packet)
  starvation.on_game_save()

  task_manager.save(packet)
  self.actor_detector:save(packet)

  ASSERT(packet:w_tell() <= 7500, "actor packet size is critical: %s", packet:w_tell())
  log2( "~~Actor netpacket size %s", packet:w_tell() )
	
  self.am:call("on_save", packet)
  self.am:call("on_save_after_all")
end


function actor_binder:load( reader )
  object_binder.load( self, reader )

  --' Загружаем уровень сложности
  local game_difficulty = reader:r_u8() 
  if game_difficulty >= 128 then           
    game_difficulty = game_difficulty - 128     
  end

  get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

  if reader:r_eof() then
    abort( "Это сохранение необратимо повреждено - удалите его, и переиграйте с более раннего сохранения. Продолжать игру на этом сохранении категорически запрещено!" )
    string.format( "%s" )
  end

  local stored_input_time = reader:r_u8()
  -- оставлено для совместимости
  if stored_input_time == true then
    utils.r_CTime(reader)
  end

  xr_logic.pstor_load_all(self.object, reader)
  task_manager.load(reader)
  self.actor_detector:load(reader)

  self.am:call("on_load", reader)
end


function actor_binder:on_use_object( obj )
  local s = get_string( obj:section(), "bind_stalker.on_use_call" )
  if s then
    local f, err = loadstring( "return " .. s .. "( ... )" )
    ASSERT( f, err )
    f( obj )
  end
  if obj then
    local sobj = sim:object( obj:id() )
    if sobj then
      self.am:call( "on_use", obj, sobj )
    end
  end
	item_use.on_use_object(obj)
end

-- Weapon functions
function hide_weapon()
  weapon_hide = true
end

function restore_weapon()
   weapon_hide = false
end


function actor_binder:on_actor_weapon_zoom_in( obj )
  self.am:call( "on_actor_weapon_zoom_in", obj  )
end

function actor_binder:on_actor_weapon_zoom_out( obj )
  self.am:call( "on_actor_weapon_zoom_out", obj )
end


function actor_binder:on_throw_grenade( obj )
  self.am:call( "on_throw_grenade", obj )
end


function actor_binder:on_actor_weapon_reload( obj )
  self.am:call( "on_actor_weapon_reload", obj )
end


function actor_binder:on_actor_weapon_fire( obj )
  self.am:call( "on_actor_weapon_fire", obj )
end


function actor_binder:on_actor_weapon_start_firing( obj )
  self.am:call( "on_actor_weapon_start_firing", obj )
end


function actor_binder:on_inv_box_put_item( box, item )
  self.am:call(
    "on_inv_box_put_item", box, item, alife():object( item:id() )
  )
end


function actor_binder:update_artefacts_on_belt( dt )
  self.am:call( "update_artefacts_on_belt", dt )
end


function actor_binder:level_changer_action( obj, wnd )
  local sobj = obj:get_alife_object()
  local lc   = sobj:get_level_changer()
  local dest_vertex = lc.dest_game_vertex_id
  local dest_lname  = alife():level_name(
    game_graph():vertex( dest_vertex ):level_id()
  )
  local msg_text_wnd = wnd:FindChild( "message_box_change_level:message_text" )
  msg_text_wnd:GetCUIStatic():SetText(
    game.translate_string( dest_lname ) .. ": "
    .. game.translate_string( "level_changer_invitation" )
  )
  self.am:call( "level_changer_action", obj, wnd )
end

function actor_binder:cell_item_create(item)
  self.am:call( "on_cell_item_create", item )
end

function actor_binder:on_cell_item_focus( obj )
  self.am:call( "on_cell_item_focus", obj )
end


function actor_binder:on_cell_item_focus_lost( obj )
  self.am:call( "on_cell_item_focus_lost", obj )
end


function actor_binder:on_cell_item_mouse( obj, x, y, action )
  self.am:call( "on_cell_item_mouse", obj, x, y, action )
end


function has_traded()
  if is_on_trade then
    if db.actor:is_talking() then
      db.actor:stop_talk()
    end
    is_on_trade = false
  end
end